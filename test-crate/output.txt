body string fn main() -> () {
    let mut _0: ();
    let mut _2: std::slice::IterMut<'?9, i32>;
    let mut _3: std::slice::IterMut<'?10, i32>;
    let mut _4: &'?11 mut [i32];
    let mut _5: &'?12 mut [i32];
    let mut _6: &'?13 mut std::vec::Vec<i32>;
    let mut _8: ();
    let _9: ();
    let mut _10: std::option::Option<&'?15 mut i32>;
    let mut _11: &'?16 mut std::slice::IterMut<'?17, i32>;
    let mut _12: &'?18 mut std::slice::IterMut<'?19, i32>;
    let mut _13: isize;
    let mut _14: !;
    let mut _16: (i32, bool);
    scope 1 {
        scope 2 {
            debug v => _1;
            scope 6 {
                scope 7 {
                    scope 8 {
                        scope 9 {
                        }
                        scope 10 {
                            scope 11 {
                            }
                        }
                    }
                    scope 12 {
                        let mut _7: std::slice::IterMut<'?14, i32>;
                        scope 13 {
                            debug iter => _7;
                            scope 14 {
                                scope 15 {
                                    scope 16 {
                                        scope 17 {
                                        }
                                        scope 18 {
                                            scope 19 {
                                            }
                                        }
                                    }
                                    scope 20 {
                                        scope 21 {
                                        }
                                    }
                                    scope 22 {
                                        let _15: &'?20 mut i32;
                                        scope 23 {
                                            debug i => _15;
                                            scope 24 {
                                                scope 25 {
                                                    scope 26 {
                                                    }
                                                    scope 27 {
                                                        scope 28 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            let mut _1: std::vec::Vec<i32> as UserTypeProjection { base: UserType(0), projs: [] };
            scope 4 {
                scope 5 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = std::vec::Vec::<i32>::new() -> [return: bb1, unwind: bb15];
    }

    bb1: {
        FakeRead(ForLet(None), _1);
        AscribeUserType(_1, o, UserTypeProjection { base: UserType(2), projs: [] });
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &'?2 mut _1;
        _5 = <std::vec::Vec<i32> as std::ops::DerefMut>::deref_mut(move _6) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _4 = &'?3 mut (*_5);
        StorageDead(_6);
        _3 = core::slice::<impl [i32]>::iter_mut(move _4) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        StorageDead(_4);
        _2 = <std::slice::IterMut<'?4, i32> as std::iter::IntoIterator>::into_iter(move _3) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        StorageDead(_3);
        PlaceMention(_2);
        StorageLive(_7);
        _7 = move _2;
        goto -> bb5;
    }

    bb5: {
        falseUnwind -> [real: bb6, unwind: bb14];
    }

    bb6: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &'?5 mut _7;
        _11 = &'?6 mut (*_12);
        _10 = <std::slice::IterMut<'?7, i32> as std::iter::Iterator>::next(move _11) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        StorageDead(_11);
        PlaceMention(_10);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb8];
    }

    bb8: {
        FakeRead(ForMatchedPlace(None), _10);
        unreachable;
    }

    bb9: {
        falseEdge -> [real: bb11, imaginary: bb10];
    }

    bb10: {
        StorageLive(_15);
        _15 = move ((_10 as Some).0: &'?8 mut i32);
        _16 = CheckedAdd((*_15), const 1_i32);
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_15), const 1_i32) -> [success: bb12, unwind: bb14];
    }

    bb11: {
        _0 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_2);
        drop(_1) -> [return: bb13, unwind: bb15];
    }

    bb12: {
        (*_15) = move (_16.0: i32);
        _9 = const ();
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _8 = const ();
        goto -> bb5;
    }

    bb13: {
        StorageDead(_1);
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

name map {
    "iter": _7,
    "v": _1,
    "i": _15,
}
locals map {
    _1: {
        bw0,
    },
    _5: {
        bw1,
    },
    _7: {
        bw2,
    },
    _12: {
        bw3,
    },
}
activation map {
    bb2[2]: [
        bw1,
    ],
    bb6[6]: [
        bw3,
    ],
}, 
no output facts
loan regions {
    bw0: (
        4,
        6,
    ),
    bw2: (
        4,
        4,
    ),
    bw3: (
        4,
        4,
    ),
    bw1: (
        4,
        6,
    ),
}
loan issued at (
    '?2,
    bw0,
    LocationIndex(19),
)
borrow_data for location bb1[7] : BorrowData {
    reserve_location: bb1[7],
    activation_location: NotTwoPhase,
    kind: Mut {
        kind: Default,
    },
    region: '?2,
    borrowed_place: _1,
    assigned_place: _6,
}
borrowed_place: Some(
    "v",
)
assigned place None
line 4
loan issued at (
    '?3,
    bw1,
    LocationIndex(23),
)
borrow_data for location bb2[0] : BorrowData {
    reserve_location: bb2[0],
    activation_location: ActivatedAt(
        bb2[2],
    ),
    kind: Mut {
        kind: TwoPhaseBorrow,
    },
    region: '?3,
    borrowed_place: (*_5),
    assigned_place: _4,
}
borrowed_place: None
assigned place None
line 4
loan issued at (
    '?5,
    bw2,
    LocationIndex(53),
)
borrow_data for location bb6[4] : BorrowData {
    reserve_location: bb6[4],
    activation_location: NotTwoPhase,
    kind: Mut {
        kind: Default,
    },
    region: '?5,
    borrowed_place: _7,
    assigned_place: _12,
}
borrowed_place: Some(
    "iter",
)
assigned place None
line 4
loan issued at (
    '?6,
    bw3,
    LocationIndex(55),
)
borrow_data for location bb6[5] : BorrowData {
    reserve_location: bb6[5],
    activation_location: ActivatedAt(
        bb6[6],
    ),
    kind: Mut {
        kind: TwoPhaseBorrow,
    },
    region: '?6,
    borrowed_place: (*_12),
    assigned_place: _11,
}
borrowed_place: None
assigned place None
line 4
loan bw0 killed at LocationIndex(3)
line 3
loan bw1 killed at LocationIndex(21)
line 4
loan bw2 killed at LocationIndex(39)
line 4
loan bw3 killed at LocationIndex(53)
line 4
loan bw3 killed at LocationIndex(83)
line 6
loan bw2 killed at LocationIndex(89)
line 6
loan bw1 killed at LocationIndex(91)
line 6
loan bw3 killed at LocationIndex(103)
line 6
loan bw0 killed at LocationIndex(113)
line 7
t `std::vec::Vec<i32>`
