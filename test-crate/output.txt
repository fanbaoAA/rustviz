t `std::vec::Vec<i32>`
fn_name "Vec::new"
path PathSegment {
    ident: push#0,
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).14),
    res: Err,
    args: None,
    infer_args: true,
}
rcvr Expr {
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).15),
    kind: Path(
        Resolved(
            None,
            Path {
                span: src/lib.rs:4:3: 4:4 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ test_crate[8e1d]::main).12),
                ),
                segments: [
                    PathSegment {
                        ident: v#0,
                        hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).16),
                        res: Local(
                            HirId(DefId(0:3 ~ test_crate[8e1d]::main).12),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: src/lib.rs:4:3: 4:4 (#0),
}
args [
    Expr {
        hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).17),
        kind: Lit(
            Spanned {
                node: Int(
                    Pu128(
                        8,
                    ),
                    Unsuffixed,
                ),
                span: src/lib.rs:4:10: 4:11 (#0),
            },
        ),
        span: src/lib.rs:4:10: 4:11 (#0),
    },
]
path PathSegment {
    ident: unwrap#0,
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).25),
    res: Err,
    args: None,
    infer_args: true,
}
rcvr Expr {
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).26),
    kind: MethodCall(
        PathSegment {
            ident: get#0,
            hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).27),
            res: Err,
            args: None,
            infer_args: true,
        },
        Expr {
            hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).28),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: src/lib.rs:5:17: 5:18 (#0),
                        res: Local(
                            HirId(DefId(0:3 ~ test_crate[8e1d]::main).12),
                        ),
                        segments: [
                            PathSegment {
                                ident: v#0,
                                hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ test_crate[8e1d]::main).12),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: src/lib.rs:5:17: 5:18 (#0),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).30),
                kind: Lit(
                    Spanned {
                        node: Int(
                            Pu128(
                                0,
                            ),
                            Unsuffixed,
                        ),
                        span: src/lib.rs:5:23: 5:24 (#0),
                    },
                ),
                span: src/lib.rs:5:23: 5:24 (#0),
            },
        ],
        src/lib.rs:5:19: 5:25 (#0),
    ),
    span: src/lib.rs:5:17: 5:25 (#0),
}
args []
path PathSegment {
    ident: get#0,
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).27),
    res: Err,
    args: None,
    infer_args: true,
}
rcvr Expr {
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).28),
    kind: Path(
        Resolved(
            None,
            Path {
                span: src/lib.rs:5:17: 5:18 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ test_crate[8e1d]::main).12),
                ),
                segments: [
                    PathSegment {
                        ident: v#0,
                        hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).29),
                        res: Local(
                            HirId(DefId(0:3 ~ test_crate[8e1d]::main).12),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: src/lib.rs:5:17: 5:18 (#0),
}
args [
    Expr {
        hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).30),
        kind: Lit(
            Spanned {
                node: Int(
                    Pu128(
                        0,
                    ),
                    Unsuffixed,
                ),
                span: src/lib.rs:5:23: 5:24 (#0),
            },
        ),
        span: src/lib.rs:5:23: 5:24 (#0),
    },
]
unrecognized expr Expr {
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).17),
    kind: Lit(
        Spanned {
            node: Int(
                Pu128(
                    8,
                ),
                Unsuffixed,
            ),
            span: src/lib.rs:4:10: 4:11 (#0),
        },
    ),
    span: src/lib.rs:4:10: 4:11 (#0),
}
unrecognized expr Expr {
    hir_id: HirId(DefId(0:3 ~ test_crate[8e1d]::main).30),
    kind: Lit(
        Spanned {
            node: Int(
                Pu128(
                    0,
                ),
                Unsuffixed,
            ),
            span: src/lib.rs:5:23: 5:24 (#0),
        },
    ),
    span: src/lib.rs:5:23: 5:24 (#0),
}
BORROW MAP {
    "z": RefData {
        lender: Anonymous,
        lifetime: 5,
        ref_mutability: false,
        aliasing: [],
    },
}
lender to refs {}
ultimate refs {
    "z",
}
preprocessed events : [
    (
        3,
        Move {
            from: Value(
                Function(
                    Function {
                        name: "Vec::new",
                        hash: 1,
                    },
                ),
            ),
            to: Value(
                Struct(
                    Struct {
                        name: "v",
                        hash: 2,
                        owner: 2,
                        is_mut: true,
                        is_member: false,
                    },
                ),
            ),
            id: 0,
        },
    ),
    (
        4,
        PassByMutableReference {
            from: Value(
                Struct(
                    Struct {
                        name: "v",
                        hash: 2,
                        owner: 2,
                        is_mut: true,
                        is_member: false,
                    },
                ),
            ),
            to: Value(
                Function(
                    Function {
                        name: "push",
                        hash: 5,
                    },
                ),
            ),
            id: 1,
        },
    ),
    (
        4,
        Copy {
            from: Anonymous,
            to: Value(
                Function(
                    Function {
                        name: "push",
                        hash: 5,
                    },
                ),
            ),
            id: 2,
        },
    ),
    (
        5,
        PassByStaticReference {
            from: Value(
                Struct(
                    Struct {
                        name: "v",
                        hash: 2,
                        owner: 2,
                        is_mut: true,
                        is_member: false,
                    },
                ),
            ),
            to: Value(
                Function(
                    Function {
                        name: "get",
                        hash: 7,
                    },
                ),
            ),
            id: 3,
        },
    ),
    (
        5,
        Copy {
            from: Anonymous,
            to: Value(
                Function(
                    Function {
                        name: "get",
                        hash: 7,
                    },
                ),
            ),
            id: 4,
        },
    ),
    (
        5,
        Copy {
            from: Value(
                Function(
                    Function {
                        name: "unwrap",
                        hash: 6,
                    },
                ),
            ),
            to: Value(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            id: 5,
        },
    ),
    (
        5,
        StaticDie {
            from: Value(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            to: Deref(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            id: 6,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: Struct(
                Struct {
                    name: "v",
                    hash: 2,
                    owner: 2,
                    is_mut: true,
                    is_member: false,
                },
            ),
            id: 7,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: StaticRef(
                StaticRef {
                    name: "z",
                    hash: 8,
                    is_mut: false,
                },
            ),
            id: 8,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: Struct(
                Struct {
                    name: "v.buf",
                    hash: 3,
                    owner: 2,
                    is_mut: true,
                    is_member: true,
                },
            ),
            id: 9,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: Struct(
                Struct {
                    name: "v.len",
                    hash: 4,
                    owner: 2,
                    is_mut: true,
                    is_member: true,
                },
            ),
            id: 10,
        },
    ),
]
ev_line_map: {
    5: [
        StaticDie {
            from: Value(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            to: Deref(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            id: 6,
        },
    ],
}
insert line map {
    5: 0,
}
processed events [
    (
        3,
        Move {
            from: Value(
                Function(
                    Function {
                        name: "Vec::new",
                        hash: 1,
                    },
                ),
            ),
            to: Value(
                Struct(
                    Struct {
                        name: "v",
                        hash: 2,
                        owner: 2,
                        is_mut: true,
                        is_member: false,
                    },
                ),
            ),
            id: 0,
        },
    ),
    (
        4,
        PassByMutableReference {
            from: Value(
                Struct(
                    Struct {
                        name: "v",
                        hash: 2,
                        owner: 2,
                        is_mut: true,
                        is_member: false,
                    },
                ),
            ),
            to: Value(
                Function(
                    Function {
                        name: "push",
                        hash: 5,
                    },
                ),
            ),
            id: 1,
        },
    ),
    (
        4,
        Copy {
            from: Anonymous,
            to: Value(
                Function(
                    Function {
                        name: "push",
                        hash: 5,
                    },
                ),
            ),
            id: 2,
        },
    ),
    (
        5,
        PassByStaticReference {
            from: Value(
                Struct(
                    Struct {
                        name: "v",
                        hash: 2,
                        owner: 2,
                        is_mut: true,
                        is_member: false,
                    },
                ),
            ),
            to: Value(
                Function(
                    Function {
                        name: "get",
                        hash: 7,
                    },
                ),
            ),
            id: 3,
        },
    ),
    (
        5,
        Copy {
            from: Anonymous,
            to: Value(
                Function(
                    Function {
                        name: "get",
                        hash: 7,
                    },
                ),
            ),
            id: 4,
        },
    ),
    (
        5,
        Copy {
            from: Value(
                Function(
                    Function {
                        name: "unwrap",
                        hash: 6,
                    },
                ),
            ),
            to: Value(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            id: 5,
        },
    ),
    (
        5,
        StaticDie {
            from: Value(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            to: Deref(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            id: 6,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: Struct(
                Struct {
                    name: "v",
                    hash: 2,
                    owner: 2,
                    is_mut: true,
                    is_member: false,
                },
            ),
            id: 7,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: StaticRef(
                StaticRef {
                    name: "z",
                    hash: 8,
                    is_mut: false,
                },
            ),
            id: 8,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: Struct(
                Struct {
                    name: "v.buf",
                    hash: 3,
                    owner: 2,
                    is_mut: true,
                    is_member: true,
                },
            ),
            id: 9,
        },
    ),
    (
        6,
        GoOutOfScope {
            ro: Struct(
                Struct {
                    name: "v.len",
                    hash: 4,
                    owner: 2,
                    is_mut: true,
                    is_member: true,
                },
            ),
            id: 10,
        },
    ),
]
processed line map {
    5: [
        StaticDie {
            from: Value(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            to: Deref(
                StaticRef(
                    StaticRef {
                        name: "z",
                        hash: 8,
                        is_mut: false,
                    },
                ),
            ),
            id: 6,
        },
    ],
}
w_map {
    1: 0,
    4: 0,
    7: 0,
    5: 0,
    3: 0,
    8: 0,
    6: 0,
    2: 0,
}
hash 2, timeline Timeline {
    resource_access_point: Struct(
        Struct {
            name: "v",
            hash: 2,
            owner: 2,
            is_mut: true,
            is_member: false,
        },
    ),
    history: [
        (
            3,
            Acquire {
                from: Value(
                    Function(
                        Function {
                            name: "Vec::new",
                            hash: 1,
                        },
                    ),
                ),
                is: Value(
                    Struct(
                        Struct {
                            name: "v",
                            hash: 2,
                            owner: 2,
                            is_mut: true,
                            is_member: false,
                        },
                    ),
                ),
                id: 0,
            },
        ),
        (
            4,
            MutableLend {
                to: Value(
                    Function(
                        Function {
                            name: "push",
                            hash: 5,
                        },
                    ),
                ),
                is: Value(
                    Struct(
                        Struct {
                            name: "v",
                            hash: 2,
                            owner: 2,
                            is_mut: true,
                            is_member: false,
                        },
                    ),
                ),
                id: 1,
            },
        ),
        (
            4,
            MutableReacquire {
                from: Value(
                    Function(
                        Function {
                            name: "push",
                            hash: 5,
                        },
                    ),
                ),
                is: Value(
                    Struct(
                        Struct {
                            name: "v",
                            hash: 2,
                            owner: 2,
                            is_mut: true,
                            is_member: false,
                        },
                    ),
                ),
                id: 1,
            },
        ),
        (
            5,
            StaticLend {
                to: Value(
                    Function(
                        Function {
                            name: "get",
                            hash: 7,
                        },
                    ),
                ),
                is: Value(
                    Struct(
                        Struct {
                            name: "v",
                            hash: 2,
                            owner: 2,
                            is_mut: true,
                            is_member: false,
                        },
                    ),
                ),
                id: 3,
            },
        ),
        (
            5,
            StaticReacquire {
                from: Value(
                    Function(
                        Function {
                            name: "get",
                            hash: 7,
                        },
                    ),
                ),
                is: Value(
                    Struct(
                        Struct {
                            name: "v",
                            hash: 2,
                            owner: 2,
                            is_mut: true,
                            is_member: false,
                        },
                    ),
                ),
                id: 3,
            },
        ),
        (
            6,
            OwnerGoOutOfScope,
        ),
    ],
    states: [
        (
            1,
            3,
            OutOfScope,
        ),
        (
            3,
            4,
            FullPrivilege {
                s: Full,
            },
        ),
        (
            4,
            4,
            RevokedPrivilege {
                to: Anonymous,
                borrow_to: Value(
                    Function(
                        Function {
                            name: "push",
                            hash: 5,
                        },
                    ),
                ),
                prev_state: FullPrivilege {
                    s: Full,
                },
            },
        ),
        (
            4,
            5,
            FullPrivilege {
                s: Full,
            },
        ),
        (
            5,
            5,
            PartialPrivilege {
                s: Full,
            },
        ),
        (
            5,
            6,
            FullPrivilege {
                s: Full,
            },
        ),
        (
            6,
            6,
            OutOfScope,
        ),
    ],
}
hash 3, timeline Timeline {
    resource_access_point: Struct(
        Struct {
            name: "v.buf",
            hash: 3,
            owner: 2,
            is_mut: true,
            is_member: true,
        },
    ),
    history: [
        (
            6,
            OwnerGoOutOfScope,
        ),
    ],
    states: [
        (
            1,
            6,
            OutOfScope,
        ),
    ],
}
hash 4, timeline Timeline {
    resource_access_point: Struct(
        Struct {
            name: "v.len",
            hash: 4,
            owner: 2,
            is_mut: true,
            is_member: true,
        },
    ),
    history: [
        (
            6,
            OwnerGoOutOfScope,
        ),
    ],
    states: [
        (
            1,
            6,
            OutOfScope,
        ),
    ],
}
hash 8, timeline Timeline {
    resource_access_point: StaticRef(
        StaticRef {
            name: "z",
            hash: 8,
            is_mut: false,
        },
    ),
    history: [
        (
            5,
            Copy {
                from: Value(
                    Function(
                        Function {
                            name: "unwrap",
                            hash: 6,
                        },
                    ),
                ),
                is: Value(
                    StaticRef(
                        StaticRef {
                            name: "z",
                            hash: 8,
                            is_mut: false,
                        },
                    ),
                ),
                id: 5,
            },
        ),
        (
            5,
            StaticReacquire {
                from: Value(
                    StaticRef(
                        StaticRef {
                            name: "z",
                            hash: 8,
                            is_mut: false,
                        },
                    ),
                ),
                is: Deref(
                    StaticRef(
                        StaticRef {
                            name: "z",
                            hash: 8,
                            is_mut: false,
                        },
                    ),
                ),
                id: 6,
            },
        ),
        (
            5,
            StaticDie {
                to: Deref(
                    StaticRef(
                        StaticRef {
                            name: "z",
                            hash: 8,
                            is_mut: false,
                        },
                    ),
                ),
                is: Value(
                    StaticRef(
                        StaticRef {
                            name: "z",
                            hash: 8,
                            is_mut: false,
                        },
                    ),
                ),
                id: 6,
            },
        ),
        (
            6,
            RefGoOutOfScope,
        ),
    ],
    states: [
        (
            1,
            5,
            OutOfScope,
        ),
        (
            5,
            5,
            FullPrivilege {
                s: Full,
            },
        ),
        (
            5,
            5,
            Invalid,
        ),
        (
            5,
            6,
            Invalid,
        ),
        (
            6,
            6,
            Invalid,
        ),
    ],
}
PREV STATE OutOfScope
PREV STATE OutOfScope
PREV STATE OutOfScope
PREV STATE OutOfScope
