fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/lib.rs:1:11: 1:11
    let mut _2: (i32, bool);             // in scope 0 at src/lib.rs:3:15: 3:21
    let mut _5: (i32, bool);             // in scope 0 at src/lib.rs:9:19: 9:25
    let mut _8: bool;                    // in scope 0 at src/lib.rs:13:21: 13:27
    let mut _9: bool;                    // in scope 0 at src/lib.rs:13:21: 13:27
    let mut _10: bool;                   // in scope 0 at src/lib.rs:13:21: 13:27
    let mut _11: bool;                   // in scope 0 at src/lib.rs:13:21: 13:27
    let mut _13: bool;                   // in scope 0 at src/lib.rs:16:21: 16:27
    let mut _14: bool;                   // in scope 0 at src/lib.rs:16:21: 16:27
    let mut _15: bool;                   // in scope 0 at src/lib.rs:16:21: 16:27
    let mut _16: bool;                   // in scope 0 at src/lib.rs:16:21: 16:27
    scope 1 {
        scope 2 {
            debug sum => _1;             // in scope 2 at src/lib.rs:3:9: 3:12
            scope 7 {
                debug difference => _3;  // in scope 7 at src/lib.rs:6:9: 6:19
                scope 12 {
                    debug product => _4; // in scope 12 at src/lib.rs:9:9: 9:16
                    scope 17 {
                        debug quotient => _6; // in scope 17 at src/lib.rs:12:9: 12:17
                        scope 22 {
                            debug truncated => _7; // in scope 22 at src/lib.rs:13:9: 13:18
                            scope 27 {
                                debug remainder => _12; // in scope 27 at src/lib.rs:16:9: 16:18
                                scope 32 {
                                    debug t => _17; // in scope 32 at src/lib.rs:17:9: 17:10
                                    scope 35 {
                                        debug f => _18; // in scope 35 at src/lib.rs:19:9: 19:10
                                    }
                                    scope 36 {
                                        let _18: bool as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 36 at src/lib.rs:19:9: 19:10
                                        scope 37 {
                                        }
                                    }
                                }
                                scope 33 {
                                    let _17: bool; // in scope 33 at src/lib.rs:17:9: 17:10
                                    scope 34 {
                                    }
                                }
                            }
                            scope 28 {
                                let _12: i32; // in scope 28 at src/lib.rs:16:9: 16:18
                                scope 29 {
                                    scope 30 {
                                    }
                                    scope 31 {
                                    }
                                }
                            }
                        }
                        scope 23 {
                            let _7: i32; // in scope 23 at src/lib.rs:13:9: 13:18
                            scope 24 {
                                scope 25 {
                                }
                                scope 26 {
                                }
                            }
                        }
                    }
                    scope 18 {
                        let _6: f64;     // in scope 18 at src/lib.rs:12:9: 12:17
                        scope 19 {
                            scope 20 {
                            }
                            scope 21 {
                            }
                        }
                    }
                }
                scope 13 {
                    let _4: i32;         // in scope 13 at src/lib.rs:9:9: 9:16
                    scope 14 {
                        scope 15 {
                        }
                        scope 16 {
                        }
                    }
                }
            }
            scope 8 {
                let _3: f64;             // in scope 8 at src/lib.rs:6:9: 6:19
                scope 9 {
                    scope 10 {
                    }
                    scope 11 {
                    }
                }
            }
        }
        scope 3 {
            let _1: i32;                 // in scope 3 at src/lib.rs:3:9: 3:12
            scope 4 {
                scope 5 {
                }
                scope 6 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 3 at src/lib.rs:3:9: 3:12
        _2 = CheckedAdd(const 5_i32, const 10_i32); // scope 4 at src/lib.rs:3:15: 3:21
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const 5_i32, const 10_i32) -> [success: bb1, unwind: bb7]; // scope 4 at src/lib.rs:3:15: 3:21
    }

    bb1: {
        _1 = move (_2.0: i32);           // scope 4 at src/lib.rs:3:15: 3:21
        FakeRead(ForLet(None), _1);      // scope 3 at src/lib.rs:3:9: 3:12
        StorageLive(_3);                 // scope 8 at src/lib.rs:6:9: 6:19
        _3 = Sub(const 95.5f64, const 4.2999999999999998f64); // scope 9 at src/lib.rs:6:22: 6:32
        FakeRead(ForLet(None), _3);      // scope 8 at src/lib.rs:6:9: 6:19
        StorageLive(_4);                 // scope 13 at src/lib.rs:9:9: 9:16
        _5 = CheckedMul(const 4_i32, const 30_i32); // scope 14 at src/lib.rs:9:19: 9:25
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_i32, const 30_i32) -> [success: bb2, unwind: bb7]; // scope 14 at src/lib.rs:9:19: 9:25
    }

    bb2: {
        _4 = move (_5.0: i32);           // scope 14 at src/lib.rs:9:19: 9:25
        FakeRead(ForLet(None), _4);      // scope 13 at src/lib.rs:9:9: 9:16
        StorageLive(_6);                 // scope 18 at src/lib.rs:12:9: 12:17
        _6 = Div(const 56.700000000000003f64, const 32.200000000000003f64); // scope 19 at src/lib.rs:12:20: 12:31
        FakeRead(ForLet(None), _6);      // scope 18 at src/lib.rs:12:9: 12:17
        StorageLive(_7);                 // scope 23 at src/lib.rs:13:9: 13:18
        _8 = Eq(const 3_i32, const 0_i32); // scope 24 at src/lib.rs:13:21: 13:27
        assert(!move _8, "attempt to divide `{}` by zero", const -5_i32) -> [success: bb3, unwind: bb7]; // scope 24 at src/lib.rs:13:21: 13:27
    }

    bb3: {
        _9 = Eq(const 3_i32, const -1_i32); // scope 24 at src/lib.rs:13:21: 13:27
        _10 = Eq(const -5_i32, const i32::MIN); // scope 24 at src/lib.rs:13:21: 13:27
        _11 = BitAnd(move _9, move _10); // scope 24 at src/lib.rs:13:21: 13:27
        assert(!move _11, "attempt to compute `{} / {}`, which would overflow", const -5_i32, const 3_i32) -> [success: bb4, unwind: bb7]; // scope 24 at src/lib.rs:13:21: 13:27
    }

    bb4: {
        _7 = Div(const -5_i32, const 3_i32); // scope 24 at src/lib.rs:13:21: 13:27
        FakeRead(ForLet(None), _7);      // scope 23 at src/lib.rs:13:9: 13:18
        StorageLive(_12);                // scope 28 at src/lib.rs:16:9: 16:18
        _13 = Eq(const 5_i32, const 0_i32); // scope 29 at src/lib.rs:16:21: 16:27
        assert(!move _13, "attempt to calculate the remainder of `{}` with a divisor of zero", const 43_i32) -> [success: bb5, unwind: bb7]; // scope 29 at src/lib.rs:16:21: 16:27
    }

    bb5: {
        _14 = Eq(const 5_i32, const -1_i32); // scope 29 at src/lib.rs:16:21: 16:27
        _15 = Eq(const 43_i32, const i32::MIN); // scope 29 at src/lib.rs:16:21: 16:27
        _16 = BitAnd(move _14, move _15); // scope 29 at src/lib.rs:16:21: 16:27
        assert(!move _16, "attempt to compute the remainder of `{} % {}`, which would overflow", const 43_i32, const 5_i32) -> [success: bb6, unwind: bb7]; // scope 29 at src/lib.rs:16:21: 16:27
    }

    bb6: {
        _12 = Rem(const 43_i32, const 5_i32); // scope 29 at src/lib.rs:16:21: 16:27
        FakeRead(ForLet(None), _12);     // scope 28 at src/lib.rs:16:9: 16:18
        StorageLive(_17);                // scope 33 at src/lib.rs:17:9: 17:10
        _17 = const true;                // scope 34 at src/lib.rs:17:13: 17:17
        FakeRead(ForLet(None), _17);     // scope 33 at src/lib.rs:17:9: 17:10
        StorageLive(_18);                // scope 36 at src/lib.rs:19:9: 19:10
        _18 = const false;               // scope 37 at src/lib.rs:19:19: 19:24
        FakeRead(ForLet(None), _18);     // scope 36 at src/lib.rs:19:9: 19:10
        AscribeUserType(_18, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 36 at src/lib.rs:19:12: 19:16
        _0 = const ();                   // scope 1 at src/lib.rs:1:11: 20:2
        StorageDead(_18);                // scope 32 at src/lib.rs:20:1: 20:2
        StorageDead(_17);                // scope 27 at src/lib.rs:20:1: 20:2
        StorageDead(_12);                // scope 22 at src/lib.rs:20:1: 20:2
        StorageDead(_7);                 // scope 17 at src/lib.rs:20:1: 20:2
        StorageDead(_6);                 // scope 12 at src/lib.rs:20:1: 20:2
        StorageDead(_4);                 // scope 7 at src/lib.rs:20:1: 20:2
        StorageDead(_3);                 // scope 2 at src/lib.rs:20:1: 20:2
        StorageDead(_1);                 // scope 1 at src/lib.rs:20:1: 20:2
        return;                          // scope 0 at src/lib.rs:20:2: 20:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at src/lib.rs:1:1: 20:2
    }
}
