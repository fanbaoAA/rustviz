4:["!{Move(String::from()->s3)}"]
5:["!{Move(s3->s2)}"]
2:["!{Move(String::from()->s1)}"]
10:["!{GoOutOfScope(s1)}", "!{GoOutOfScope(s2)}"]
9:["!{PassByStaticReference(s2->println())}"]
6:["!{GoOutOfScope(s3)}"]
8:["!{PassByStaticReference(s1->println())}"]
s is moved out of scope
11:["!{InitOwnerParam(s)}"]
12:["!{Move(s->None)}"]
/* --- BEGIN Variable Definitions ---
Owner Not s1;
Owner Not s2;
Function String::from();
Owner Not s3;
Function println();
Owner Not s;
--- END Variable Definitions --- */
varmap:{"s": Owner(Owner { name: "s", hash: 6, is_mut: false }), "String::from()": Function(Function { name: "String::from()", hash: 3 }), "s2": Owner(Owner { name: "s2", hash: 2, is_mut: false }), "s3": Owner(Owner { name: "s3", hash: 4, is_mut: false }), "s1": Owner(Owner { name: "s1", hash: 1, is_mut: false }), "println()": Function(Function { name: "println()", hash: 5 })}
print_event:[(4, "!{Move(String::from()->s3)}"), (5, "!{Move(s3->s2)}"), (2, "!{Move(String::from()->s1)}"), (10, "!{GoOutOfScope(s1)}"), (10, "!{GoOutOfScope(s2)}"), (9, "!{PassByStaticReference(s2->println())}"), (6, "!{GoOutOfScope(s3)}"), (8, "!{PassByStaticReference(s1->println())}"), (11, "!{InitOwnerParam(s)}"), (12, "!{Move(s->None)}")]
vd:VisualizationData { timelines: {}, external_events: [], preprocess_external_events: [], event_line_map: {} }
successfully wrote to src/vis_code.svg
successfully wrote to src/vis_timeline.svg
